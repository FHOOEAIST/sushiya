package science.aist.sushiya.service.languageserver;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.ParseCancellationException;
import org.testng.Assert;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import science.aist.sushiya.service.languageserver.diagnostic.parser.FSHLexer;
import science.aist.sushiya.service.languageserver.diagnostic.parser.FSHParser;

/**
 * <p>Created by Sophie Bauernfeind on 01.04.2021</p>
 * <p>Test class for {@link FSHParser} and {@link FSHLexer}</p>
 *
 * @author Sophie Bauernfeind
 */

public class ParserLexerTest {
    enum ParseType{
        ALIAS,
        PROFILE,
        EXTENSION,
        INVARIANT,
        INSTANCE,
        VALUESET,
        CODESYSTEM,
        RULESET,
        PARAMRULESET,
        MAPPTING
    }

    public class ThrowingErrorListener extends BaseErrorListener {
        @Override
        public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e)
                throws ParseCancellationException {
            throw new ParseCancellationException("line " + line + ":" + charPositionInLine + " " + msg);
        }
    }

    public final ThrowingErrorListener errorListener = new ThrowingErrorListener();

    @Parameters ({"text", "type", "incorrectText"})
    public void testParse(String text, ParseType type, boolean incorrectText){
        //given
        CharStream input = CharStreams.fromString(text);
        boolean exceptionWasThrown = false;

        //when
        FSHLexer lexer = new FSHLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        FSHParser parser = new FSHParser(tokens);
        parser.addErrorListener(errorListener);

        //then
        try{
            switch (type){
                case ALIAS:
                    parser.alias();
                    break;
                case INVARIANT:
                    parser.invariant();
                    break;
                case RULESET:
                    parser.ruleSet();
                    break;
                case CODESYSTEM:
                    parser.codeSystem();
                    break;
                case VALUESET:
                    parser.valueSet();
                    break;
                case EXTENSION:
                    parser.extension();
                    break;
                case PROFILE:
                    parser.profile();
                    break;
                case INSTANCE:
                    parser.instance();
                    break;
                case MAPPTING:
                    parser.mapping();
                    break;
                case PARAMRULESET:
                    parser.paramRuleSet();
                    break;
            }
        }catch (ParseCancellationException exception){
            exceptionWasThrown = true;
        }

        Assert.assertTrue( incorrectText && exceptionWasThrown
                || !incorrectText && !exceptionWasThrown,
                "Parsing didn't work as expected. Check \"incorrectText\" parameter or the syntax of the text.\n" +
                "If everything is correct, check the autogenerated Parser and Lexer or the syntax definition.");
    }

    @Test
    public void testParseOneAlias(){
        String text = "Alias: LNC = http://loinc.org";
        testParse(text,ParseType.ALIAS,false);
    }

    @Test
    public void testParseTwoAlias(){
        String text = "Alias: LNC = http://loinc.org"
                    + "Alias: SCT = http://snomed.info/sct";
        testParse(text,ParseType.ALIAS,false);
    }

    @Test
    public void testParseWrongAlias(){
        String text = "Alias: LNC wrong = http://loinc.org";
        testParse(text,ParseType.ALIAS,true);
    }

    @Test
    public void testParseOneProfileWithoutRules(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/AustrianAddress.fsh (02 march 2021, Shorthand v. 1.1.0)
        String text = "Profile:     AustrianAddress \n"
                + "Parent:          Address \n"
                + "Id:              AustrianRepresentationOfAddress \n"
                + "Title:           \"Austrian Representation of an Address\" \n"
                + "Description:     \"HL7 Austria FHIR Core Profile for Address Data in Austria.\" \n";
        testParse(text,ParseType.PROFILE,false);
    }

    @Test
    public void testParseWrongProfileWithoutRules(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/AustrianAddress.fsh (02 march 2021, Shorthand v. 1.1.0)
        String text = "Profile:     AustrianAddress \n"
                + "Source:          WrongMetadata\n"
                + "Parent:          Address \n"
                + "Id:              AustrianRepresentationOfAddress \n"
                + "Title:           \"Austrian Representation of an Address\" \n"
                + "Description:     \"HL7 Austria FHIR Core Profile for Address Data in Austria.\" \n";
        testParse(text,ParseType.PROFILE, true);
    }

    @Test
    public void testParseOneExtensionWithoutRules(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/AustriaReligion.fsh (02 march 2021, Shorthand v. 1.1.0)
        String text = "Extension:    PatientReligion \n"
                + "Id:           patientReligion \n"
                + "Title:        \"Patient Religion\" \n"
                + "Description:  \"The Religion (registered in Austria) of a Patient\" \n";
        testParse(text,ParseType.EXTENSION,false);
    }

    @Test
    public void testParseWrongExtensionWithoutRules(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/AustriaReligion.fsh (02 march 2021, Shorthand v. 1.1.0)
        String text = "Extension:    \n"
                + "Source:          WrongMetadata\n"
                + "Id:           patientReligion \n"
                + "Title:        \"Patient Religion\" \n"
                + "Description:  \"The Religion (registered in Austria) of a Patient\" \n";
        testParse(text,ParseType.EXTENSION,true);
    }

    @Test
    public void testParseOneInvariantWithoutRules(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-invariants (03 march 2021, Shorthand v. 1.1.0)
        String text = "Invariant:  us-core-8 \n"
                + "Description: \"Patient.name.given or Patient.name.family or both SHALL be present\" \n"
                + "Expression: \"family.exists() or given.exists()\" \n"
                + "Severity:   #error \n"
                + "XPath:      \"f:given or f:family\" \n";
        testParse(text,ParseType.INVARIANT,false);
    }

    @Test
    public void testParseWrongInvariantWithoutRules(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-invariants (03 march 2021, Shorthand v. 1.1.0)
        String text = "Invariant:  us-core-8 \n"
                + "Id:      WrongMetadata \n"
                + "Description: \"Patient.name.given or Patient.name.family or both SHALL be present\" \n"
                + "Expression: \"family.exists() or given.exists()\" \n"
                + "Severity:   #error \n"
                + "XPath:      \"f:given or f:family\" \n";
        testParse(text,ParseType.INVARIANT,true);
    }

    @Test
    public void testParseOneInstanceWithoutRules(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/VS-ELGA-ReligiousAffiliation.fsh (02 march 2021, Shorthand v. 1.1.0)
        String text = "Instance:   VS-ELGA-ReligiousAffiliation \n"
                + "InstanceOf: ValueSet \n"
                + "Usage:      #definition \n";
        testParse(text,ParseType.INSTANCE,false);
    }

    @Test
    public void testParseWrongInstanceWithoutRules(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/VS-ELGA-ReligiousAffiliation.fsh (02 march 2021, Shorthand v. 1.1.0)
        String text = "Instance:   \n"
                + "InstanceOf: ValueSet \n"
                + "Usage:      #definition \n";
        testParse(text,ParseType.INSTANCE,true);
    }

    @Test
    public void testParseOneValueSetWithoutRules(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html (02 march 2021, Shorthand v. 1.1.0)
        String text = "ValueSet: 		BodyWeightPreconditionVS \n"
                + "Title: 		\"Body weight preconditions.\" \n"
                + "Description:  	\"Circumstances for body weight measurement.\" \n";
        testParse(text,ParseType.VALUESET,false);
    }

    @Test
    public void testParseWrongValueSetWithoutRules(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html (02 march 2021, Shorthand v. 1.1.0)
        String text = "ValueSet: \n"
                + "Title: 		\"Body weight preconditions.\" \n"
                + "Description:  	\"Circumstances for body weight measurement.\" \n";
        testParse(text,ParseType.VALUESET,true);
    }

    @Test
    public void testParseOneCodeSystemWithoutRules(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-code-systems (02 march 2021, Shorthand v. 1.1.0)
        String text = "CodeSystem:  	YogaCS \n"
                + "Id: 			yoga-code-system \n"
                + "Title: 		\"Yoga Code System.\" \n"
                + "Description:  	\"A brief vocabulary of yoga-related terms.\" \n";
        testParse(text,ParseType.CODESYSTEM,false);
    }

    @Test
    public void testParseWrongCodeSystemWithoutRules(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-code-systems (02 march 2021, Shorthand v. 1.1.0)
        String text = "CodeSystem:  \n"
                + "Id: 			yoga-code-system \n"
                + "Title: 		\"Yoga Code System.\" \n"
                + "Description:  	\"A brief vocabulary of yoga-related terms.\" \n";
        testParse(text,ParseType.CODESYSTEM,true);
    }

    @Test
    public void testParseOneRuleSet(){
        //reference from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#simple-rule-sets (11 march 2021, Shorthand v. 1.1.0)
        String text = "RuleSet: RuleSet1 \n"
                + "* ^status = #draft \n"
                + "* ^experimental = true \n"
                + "* ^publisher = \"Elbonian Medical Society\" \n";
        testParse(text,ParseType.RULESET,false);
    }

    @Test
    public void testParseWrongRuleSet(){
        //reference from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#simple-rule-sets (11 march 2021, Shorthand v. 1.1.0)
        String text = "RuleSet: RuleSet1 \n"
                + "Source:      WrongMetadata\n"
                + "* ^status = #draft \n"
                + "* ^experimental = true \n"
                + "* ^publisher = \"Elbonian Medical Society\" \n";
        testParse(text,ParseType.RULESET,true);
    }

    @Test
    public void testParseOneParamRuleSet(){
        //reference from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#parameterized-rule-sets (11 march 2021, Shorthand v. 1.1.0)
        String text = "RuleSet:     Question(linkId, text, type, repeats) \n"
                + "* item[+].linkId = \"{linkId}\"  \n"
                + "* item[=].text = \"{text}\"  \n"
                + "* item[=].type = #{type}  \n"
                + "* item[=].repeats = {repeats}  \n";
        testParse(text,ParseType.PARAMRULESET,false);
    }

    @Test
    public void testParseWrongParamRuleSet(){
        //reference from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#parameterized-rule-sets (11 march 2021, Shorthand v. 1.1.0)
        String text = "RuleSet:     Question(linkId, text, type, repeats) \n"
                + "Source:      WrongMetadata\n"
                + "* item[+].linkId = \"{linkId}\"  \n"
                + "* item[=].text = \"{text}\"  \n"
                + "* item[=].type = #{type}  \n"
                + "* item[=].repeats = {repeats}  \n";
        testParse(text,ParseType.PARAMRULESET,true);
    }

    @Test
    public void testParseOneMappingWithoutRules(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-mappings (02 march 2021, Shorthand v. 1.1.0)
        String text = "Mapping:  USCorePatientToArgonaut \n"
                + "Source:   USCorePatient \n"
                + "Target:   \"http://unknown.org/Argonaut-DQ-DSTU2\" \n"
                + "Title:    \"Argonaut DSTU2\" \n"
                + "Id:       argonaut-dq-dstu2 \n";
        testParse(text,ParseType.MAPPTING,false);
    }

    @Test
    public void testParseWrongMappingWithoutRules(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-mappings (02 march 2021, Shorthand v. 1.1.0)
        String text = "Mapping:  \n"
                + "Source:   USCorePatient \n"
                + "Target:   \"http://unknown.org/Argonaut-DQ-DSTU2\" \n"
                + "Title:    \"Argonaut DSTU2\" \n"
                + "Id:       argonaut-dq-dstu2 \n";
        testParse(text,ParseType.MAPPTING,true);
    }
}