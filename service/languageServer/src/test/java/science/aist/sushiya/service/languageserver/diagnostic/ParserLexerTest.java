/*
 * Copyright (c) 2021 the original author or authors.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

package science.aist.sushiya.service.languageserver.diagnostic;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.ParseCancellationException;
import org.testng.Assert;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import science.aist.sushiya.service.languageserver.parser.FSHLexer;
import science.aist.sushiya.service.languageserver.parser.FSHParser;

/**
 * <p>Created by Sophie Bauernfeind on 01.04.2021</p>
 * <p>Test class for {@link FSHParser} and {@link FSHLexer}</p>
 *
 * @author Sophie Bauernfeind
 */

public class ParserLexerTest {
    enum ParseType{
        ALIAS,
        PROFILE,
        EXTENSION,
        INVARIANT,
        INSTANCE,
        VALUESET,
        CODESYSTEM,
        RULESET,
        PARAMRULESET,
        MAPPTING
    }

    public class ThrowingErrorListener extends BaseErrorListener {
        @Override
        public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e)
                throws ParseCancellationException {
            throw new ParseCancellationException("line " + line + ":" + charPositionInLine + " " + msg);
        }
    }

    public final ThrowingErrorListener errorListener = new ThrowingErrorListener();

    @Parameters ({"text", "type", "incorrectText"})
    public void testParse(String text, ParseType type, boolean incorrectText){
        //given
        CharStream input = CharStreams.fromString(text);
        boolean exceptionWasThrown = false;

        //when
        FSHLexer lexer = new FSHLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        FSHParser parser = new FSHParser(tokens);
        parser.removeErrorListeners();
        parser.addErrorListener(errorListener);

        //then
        try{
            switch (type){
                case ALIAS:
                    parser.alias();
                    break;
                case INVARIANT:
                    parser.invariant();
                    break;
                case RULESET:
                    parser.ruleSet();
                    break;
                case CODESYSTEM:
                    parser.codeSystem();
                    break;
                case VALUESET:
                    parser.valueSet();
                    break;
                case EXTENSION:
                    parser.extension();
                    break;
                case PROFILE:
                    parser.profile();
                    break;
                case INSTANCE:
                    parser.instance();
                    break;
                case MAPPTING:
                    parser.mapping();
                    break;
                case PARAMRULESET:
                    parser.paramRuleSet();
                    break;
            }
        }catch (ParseCancellationException exception){
            exceptionWasThrown = true;
        }

        Assert.assertTrue( incorrectText && exceptionWasThrown
                || !incorrectText && !exceptionWasThrown,
                "Parsing didn't work as expected. Check \"incorrectText\" parameter or the syntax of the text.\n" +
                "If everything is correct, check the autogenerated Parser and Lexer or the syntax definition.");
    }

    @Test
    public void testParseOneCorrectAlias(){
        String text = "Alias: LNC = http://loinc.org";
        testParse(text,ParseType.ALIAS,false);
    }

    @Test
    public void testParseTwoCorrectAlias(){
        String text = "Alias: LNC = http://loinc.org"
                    + "Alias: SCT = http://snomed.info/sct";
        testParse(text,ParseType.ALIAS,false);
    }

    @Test
    public void testParseIncorrectCorrectAlias(){
        String text = "Alias: LNC wrong = http://loinc.org";
        testParse(text,ParseType.ALIAS,true);
    }

    @Test
    public void testParseCorrectProfile(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/AustrianAddress.fsh (06 april 2021, Shorthand v. 1.1.0)
        String text = "Profile:     AustrianAddress \n"
                + "Parent:          Address \n"
                + "Id:              AustrianRepresentationOfAddress \n"
                + "Title:           \"Austrian Representation of an Address\" \n"
                + "Description:     \"HL7 Austria FHIR Core Profile for Address Data in Austria.\" \n"
                + "* period 0..0 \n"
                + "* district 0..0 \n"
                + "* obeys at-addr-1\n"
                + "* obeys at-addr-2\n"
                + "* obeys at-addr-3";
        testParse(text,ParseType.PROFILE,false);
    }

    @Test
    public void testParseIncorrectProfile(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/AustrianAddress.fsh (06 april 2021, Shorthand v. 1.1.0)
        String text = "Profile:     AustrianAddress \n"
                + "Source:          WrongMetadata\n"
                + "Parent:          Address \n"
                + "Id:              AustrianRepresentationOfAddress \n"
                + "Title:           \"Austrian Representation of an Address\" \n"
                + "Description:     \"HL7 Austria FHIR Core Profile for Address Data in Austria.\" \n"
                + "* period 0..0 \n"
                + "* district 0..0 \n"
                + "* obeys at-addr-1\n"
                + "* obeys at-addr-2\n"
                + "* obeys at-addr-3";
        testParse(text,ParseType.PROFILE, true);
    }

    @Test
    public void testParseCorrectExtension(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/AustriaReligion.fsh (06 april 2021, Shorthand v. 1.1.0)
        String text = "Extension:    PatientReligion \n"
                + "Id:           patientReligion \n"
                + "Title:        \"Patient Religion\" \n"
                + "Description:  \"The Religion (registered in Austria) of a Patient\" \n"
                + "* value[x] 0..0\n"
                + "* extension contains \n"
                + "    code 0..1 and\n"
                + "    period 0..1\n"
                + "* extension[code].value[x] only CodeableConcept\n"
                + "* extension[code] ^short = \"Religion code of the Patient\"";
        testParse(text,ParseType.EXTENSION,false);
    }

    @Test
    public void testParseIncorrectExtension(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/AustriaReligion.fsh (06 april 2021, Shorthand v. 1.1.0)
        String text = "Extension:    \n"
                + "Source:          WrongMetadata\n"
                + "Id:           patientReligion \n"
                + "Title:        \"Patient Religion\" \n"
                + "Description:  \"The Religion (registered in Austria) of a Patient\" \n"
                + "* value[x] 0..0\n"
                + "* extension contains \n"
                + "    code 0..1 and\n"
                + "    period 0..1\n"
                + "* extension[code].value[x] only CodeableConcept\n"
                + "* extension[code] ^short = \"Religion code of the Patient\"";
        testParse(text,ParseType.EXTENSION,true);
    }

    @Test
    public void testParseCorrectInvariant(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-invariants (03 march 2021, Shorthand v. 1.1.0)
        String text = "Invariant:  us-core-8 \n"
                + "Description: \"Patient.name.given or Patient.name.family or both SHALL be present\" \n"
                + "Expression: \"family.exists() or given.exists()\" \n"
                + "Severity:   #error \n"
                + "XPath:      \"f:given or f:family\" \n";
        testParse(text,ParseType.INVARIANT,false);
    }

    @Test
    public void testParseIncorrectInvariant(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-invariants (03 march 2021, Shorthand v. 1.1.0)
        String text = "Invariant:  us-core-8 \n"
                + "Id:      WrongMetadata \n"
                + "Description: \"Patient.name.given or Patient.name.family or both SHALL be present\" \n"
                + "Expression: \"family.exists() or given.exists()\" \n"
                + "Severity:   #error \n"
                + "XPath:      \"f:given or f:family\" \n";
        testParse(text,ParseType.INVARIANT,true);
    }

    @Test
    public void testParseCorrectInstance(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/VS-ELGA-ReligiousAffiliation.fsh (06 april 2021, Shorthand v. 1.1.0)
        String text = "Instance:   VS-ELGA-ReligiousAffiliation \n"
                + "InstanceOf: ValueSet \n"
                + "Usage:      #definition \n"
                + "* title = \"Set of Religious Affiliation to be used in ELGA\"\n"
                + "* name = \"elga-religious-affiliation\"\n"
                + "* description = \"Set of Religious Affiliation to be used in ELGA. It is preferred to use entries of the first level hierachy (1-L)\"\n"
                + "* version = \"2.6.0+20131019\"";
        testParse(text,ParseType.INSTANCE,false);
    }

    @Test
    public void testParseIncorrectInstance(){
        //reference took from https://github.com/HL7Austria/HL7-AT-FHIR-Core-R4/blob/main/input/fsh/VS-ELGA-ReligiousAffiliation.fsh (02 march 2021, Shorthand v. 1.1.0)
        String text = "Instance:   \n"
                + "InstanceOf: ValueSet \n"
                + "Usage:      #definition \n"
                + "* title = \"Set of Religious Affiliation to be used in ELGA\"\n"
                + "* name = \"elga-religious-affiliation\"\n"
                + "* description = \"Set of Religious Affiliation to be used in ELGA. It is preferred to use entries of the first level hierachy (1-L)\"\n"
                + "* version = \"2.6.0+20131019\"";
        testParse(text,ParseType.INSTANCE,true);
    }

    @Test
    public void testParseCorrectValueSet(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-value-sets (06 april 2021, Shorthand v. 1.1.0)
        String text = "ValueSet: 		BodyWeightPreconditionVS \n"
                + "Title: 		\"Body weight preconditions.\" \n"
                + "Description:  	\"Circumstances for body weight measurement.\" \n"
                + "* SCT#971000205103 \"Wearing street clothes with shoes\"\n"
                + "* SCT#961000205106 \"Wearing street clothes, no shoes\"\n"
                + "* SCT#951000205108 \"Wearing underwear or less\"";
        testParse(text,ParseType.VALUESET,false);
    }

    @Test
    public void testParseIncorrectValueSet(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-value-sets (06 april 2021, Shorthand v. 1.1.0)
        String text = "ValueSet: \n"
                + "Title: 		\"Body weight preconditions.\" \n"
                + "Description:  	\"Circumstances for body weight measurement.\" \n"
                + "* SCT#971000205103 \"Wearing street clothes with shoes\"\n"
                + "* SCT#961000205106 \"Wearing street clothes, no shoes\"\n"
                + "* SCT#951000205108 \"Wearing underwear or less\"";
        testParse(text,ParseType.VALUESET,true);
    }

    @Test
    public void testParseCorrectCodeSystem(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-code-systems (06 april 2021, Shorthand v. 1.1.0)
        String text = "CodeSystem:  	YogaCS \n"
                + "Id: 			yoga-code-system \n"
                + "Title: 		\"Yoga Code System.\" \n"
                + "Description:  	\"A brief vocabulary of yoga-related terms.\" \n"
                + "  * #Sirsasana \"Headstand\"\n"
                + "      \"An inverted asana, also called mudra in classical hatha yoga, involves standing on one's head.\"\n"
                + "  * #Halasana \"Plough Pose\"\n"
                + "      \"Halasana or Plough pose is an inverted asana in hatha yoga and modern yoga as exercise. "
                + "Its variations include Karnapidasana with the knees by the ears, and Supta Konasana with the feet wide apart.\"";
        testParse(text,ParseType.CODESYSTEM,false);
    }

    @Test
    public void testParseIncorrectCodeSystemWithoutRules(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-code-systems (06 april 2021, Shorthand v. 1.1.0)
        String text = "CodeSystem:  \n"
                + "Id: 			yoga-code-system \n"
                + "Title: 		\"Yoga Code System.\" \n"
                + "Description:  	\"A brief vocabulary of yoga-related terms.\" \n"
                + "  * #Sirsasana \"Headstand\"\n"
                + "      \"An inverted asana, also called mudra in classical hatha yoga, involves standing on one's head.\"\n"
                + "  * #Halasana \"Plough Pose\"\n"
                + "      \"Halasana or Plough pose is an inverted asana in hatha yoga and modern yoga as exercise. "
                + "Its variations include Karnapidasana with the knees by the ears, and Supta Konasana with the feet wide apart.\"";
        testParse(text,ParseType.CODESYSTEM,true);
    }

    @Test
    public void testParseCorrectRuleSet(){
        //reference from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#simple-rule-sets (11 march 2021, Shorthand v. 1.1.0)
        String text = "RuleSet: RuleSet1 \n"
                + "* ^status = #draft \n"
                + "* ^experimental = true \n"
                + "* ^publisher = \"Elbonian Medical Society\" \n";
        testParse(text,ParseType.RULESET,false);
    }

    @Test
    public void testParseIncorrectRuleSet(){
        //reference from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#simple-rule-sets (11 march 2021, Shorthand v. 1.1.0)
        String text = "RuleSet: RuleSet1 \n"
                + "Source:      WrongMetadata\n"
                + "* ^status = #draft \n"
                + "* ^experimental = true \n"
                + "* ^publisher = \"Elbonian Medical Society\" \n";
        testParse(text,ParseType.RULESET,true);
    }

    @Test
    public void testParseCorrectParamRuleSet(){
        //reference from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#parameterized-rule-sets (11 march 2021, Shorthand v. 1.1.0)
        String text = "RuleSet:     Question(linkId, text, type, repeats) \n"
                + "* item[+].linkId = \"{linkId}\"  \n"
                + "* item[=].text = \"{text}\"  \n"
                + "* item[=].type = #{type}  \n"
                + "* item[=].repeats = {repeats}  \n";
        testParse(text,ParseType.PARAMRULESET,false);
    }

    @Test
    public void testParseIncorrectParamRuleSet(){
        //reference from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#parameterized-rule-sets (11 march 2021, Shorthand v. 1.1.0)
        String text = "RuleSet:     Question(linkId, text, type, repeats) \n"
                + "Source:      WrongMetadata\n"
                + "* item[+].linkId = \"{linkId}\"  \n"
                + "* item[=].text = \"{text}\"  \n"
                + "* item[=].type = #{type}  \n"
                + "* item[=].repeats = {repeats}  \n";
        testParse(text,ParseType.PARAMRULESET,true);
    }

    @Test
    public void testParseCorrectMapping(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-mappings (06 april 2021, Shorthand v. 1.1.0)
        String text = "Mapping:  USCorePatientToArgonaut \n"
                + "Source:   USCorePatient \n"
                + "Target:   \"http://unknown.org/Argonaut-DQ-DSTU2\" \n"
                + "Title:    \"Argonaut DSTU2\" \n"
                + "Id:       argonaut-dq-dstu2 \n"
                + "* -> \"Patient\"\n"
                + "* extension[USCoreRaceExtension] -> \"Patient.extension[http://fhir.org/guides/argonaut/StructureDefinition/argo-race]\"\n"
                + "* extension[USCoreEthnicityExtension] -> \"Patient.extension[http://fhir.org/guides/argonaut/StructureDefinition/argo-ethnicity]\"\n"
                + "* extension[USCoreBirthSexExtension] -> \"Patient.extension[http://fhir.org/guides/argonaut/StructureDefinition/argo-birthsex]\"\n"
                + "* identifier -> \"Patient.identifier\"";
        testParse(text,ParseType.MAPPTING,false);
    }

    @Test
    public void testParseIncorrectMapping(){
        //reference took from https://build.fhir.org/ig/HL7/fhir-shorthand/reference.html#defining-mappings (06 april 2021, Shorthand v. 1.1.0)
        String text = "Mapping:  \n"
                + "Source:   USCorePatient \n"
                + "Target:   \"http://unknown.org/Argonaut-DQ-DSTU2\" \n"
                + "Title:    \"Argonaut DSTU2\" \n"
                + "Id:       argonaut-dq-dstu2 \n"
                + "* -> \"Patient\"\n"
                + "* extension[USCoreRaceExtension] -> \"Patient.extension[http://fhir.org/guides/argonaut/StructureDefinition/argo-race]\"\n"
                + "* extension[USCoreEthnicityExtension] -> \"Patient.extension[http://fhir.org/guides/argonaut/StructureDefinition/argo-ethnicity]\"\n"
                + "* extension[USCoreBirthSexExtension] -> \"Patient.extension[http://fhir.org/guides/argonaut/StructureDefinition/argo-birthsex]\"\n"
                + "* identifier -> \"Patient.identifier\"";
        testParse(text,ParseType.MAPPTING,true);
    }
}